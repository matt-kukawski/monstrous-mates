{"ast":null,"code":"var _jsxFileName = \"/home/matt/code/matt-kukawski/monstrous-mates/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestMonsters } from 'actions';\nimport CardList from 'components/CardList';\nimport SearchBox from 'components/SearchBox';\nimport Scroll from 'components/Scroll';\nimport ErrorBoundary from 'components/ErrorBoundary'; // import { monsters } from '../monsters.js';\n\nimport 'containers/App.css'; // mapStateToProps tells component what state to listen to and send down as props\n\nconst mapStateToProps = state => {\n  return {\n    // props to be returned from applicable reducer\n    searchField: state.searchMonsters.searchField,\n    monsters: state.requestMonsters.monsters,\n    isPending: state.requestMonsters.isPending\n  };\n}; // mapDispatchToProps tells component what dispatch/actions to listen to i.e. sends action\n\n\nconst mapDispatchToProps = dispatch => {\n  // return object that contains all actions\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters())\n  };\n};\n\nclass App extends Component {\n  // constructor() {\n  //   super()\n  //   this.state= {\n  //     monsters: [],\n  //     searchfield: ''\n  //   }\n  // }\n  componentDidMount() {\n    // console.log(this.props.store.getState());\n    // this.setState( { monsters: monsters } );\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(users => this.setState( { monsters: users }));\n    this.props.onRequestMonsters();\n  } // onSearchChange = (event) => {\n  //   console.log(event.target.value);\n  //   this.setState({ searchfield: event.target.value });\n  // }\n\n\n  render() {\n    // searchField now comes from props not component state\n    const _this$props = this.props,\n          monsters = _this$props.monsters,\n          searchField = _this$props.searchField,\n          onSearchChange = _this$props.onSearchChange,\n          isPending = _this$props.isPending;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    }); // console.log(filteredMonsters);\n\n    return isPending ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Monstrous Mates\"), React.createElement(SearchBox, {\n      searchChange: onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(ErrorBoundary, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      monsters: filteredMonsters,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))));\n  }\n\n} // 'connect' a higher order function i.e. returns another function\n// subscribes component to any changes in redux store\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/home/matt/code/matt-kukawski/monstrous-mates/src/containers/App.js"],"names":["React","Component","connect","setSearchField","requestMonsters","CardList","SearchBox","Scroll","ErrorBoundary","mapStateToProps","state","searchField","searchMonsters","monsters","isPending","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onRequestMonsters","App","componentDidMount","props","render","filteredMonsters","filter","monster","name","toLowerCase","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,SAAhD;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,0BAA1B,C,CACA;;AACA,OAAO,oBAAP,C,CAEA;;AACA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACL;AACAC,IAAAA,WAAW,EAAED,KAAK,CAACE,cAAN,CAAqBD,WAF7B;AAGLE,IAAAA,QAAQ,EAAEH,KAAK,CAACN,eAAN,CAAsBS,QAH3B;AAILC,IAAAA,SAAS,EAAEJ,KAAK,CAACN,eAAN,CAAsBU;AAJ5B,GAAP;AAMD,CAPD,C,CASA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC;AACA,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACb,cAAc,CAACe,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAELC,IAAAA,iBAAiB,EAAE,MAAML,QAAQ,CAACZ,eAAe,EAAhB;AAF5B,GAAP;AAID,CAND;;AAQA,MAAMkB,GAAN,SAAkBrB,SAAlB,CAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AAEAsB,EAAAA,iBAAiB,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA,SAAKC,KAAL,CAAWH,iBAAX;AACD,GAhByB,CAkB1B;AACA;AACA;AACA;;;AAEAI,EAAAA,MAAM,GAAG;AACP;AADO,wBAEsD,KAAKD,KAF3D;AAAA,UAECX,QAFD,eAECA,QAFD;AAAA,UAEWF,WAFX,eAEWA,WAFX;AAAA,UAEwBM,cAFxB,eAEwBA,cAFxB;AAAA,UAEwCH,SAFxC,eAEwCA,SAFxC;AAGP,UAAMY,gBAAgB,GAAGb,QAAQ,CAACc,MAAT,CAAgBC,OAAO,IAAI;AAClD,aAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCpB,WAAW,CAACmB,WAAZ,EAApC,CAAP;AACD,KAFwB,CAAzB,CAHO,CAMP;;AAEA,WAAOhB,SAAS,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADc,GAGZ;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEG,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAES,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAHF,CAHJ;AAaD;;AA5CyB,C,CA+C5B;AACA;;;AACA,eAAexB,OAAO,CAACO,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestMonsters } from 'actions';\nimport CardList from 'components/CardList';\nimport SearchBox from 'components/SearchBox';\nimport Scroll from 'components/Scroll';\nimport ErrorBoundary from 'components/ErrorBoundary';\n// import { monsters } from '../monsters.js';\nimport 'containers/App.css';\n\n// mapStateToProps tells component what state to listen to and send down as props\nconst mapStateToProps = state => {\n  return {\n    // props to be returned from applicable reducer\n    searchField: state.searchMonsters.searchField,\n    monsters: state.requestMonsters.monsters,\n    isPending: state.requestMonsters.isPending\n  }\n}\n\n// mapDispatchToProps tells component what dispatch/actions to listen to i.e. sends action\nconst mapDispatchToProps = (dispatch) => {\n  // return object that contains all actions\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters())\n  }\n}\n\nclass App extends Component {\n  // constructor() {\n  //   super()\n  //   this.state= {\n  //     monsters: [],\n  //     searchfield: ''\n  //   }\n  // }\n\n  componentDidMount() {\n    // console.log(this.props.store.getState());\n    // this.setState( { monsters: monsters } );\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(users => this.setState( { monsters: users }));\n    this.props.onRequestMonsters();\n  }\n\n  // onSearchChange = (event) => {\n  //   console.log(event.target.value);\n  //   this.setState({ searchfield: event.target.value });\n  // }\n\n  render() {\n    // searchField now comes from props not component state\n    const { monsters, searchField, onSearchChange, isPending } = this.props;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    // console.log(filteredMonsters);\n\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Monstrous Mates</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList monsters={filteredMonsters} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// 'connect' a higher order function i.e. returns another function\n// subscribes component to any changes in redux store\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}