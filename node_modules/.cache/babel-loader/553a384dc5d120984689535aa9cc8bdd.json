{"ast":null,"code":"import _defineProperty from \"/home/matt/code/matt-kukawski/monstrous-mates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import variables rather than use strings for 'type' to assist in error detection (typos etc)\nimport { CHANGE_SEARCH_FIELD, REQUEST_MONSTERS_PENDING, REQUEST_MONSTERS_SUCCESS, REQUEST_MONSTERS_FAIL } from 'constants.js';\nconst initialStateSearch = {\n  searchField: ''\n};\nexport const searchMonsters = (state = initialStateSearch, action = {}) => {\n  console.log(action.type);\n\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return Object.assign({}, state, { searchField: action.payload });\n      return _objectSpread({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nconst initialStateMonsters = {\n  monsters: [],\n  isPending: true,\n  error: ''\n};\nexport const requestMonsters = (state = initialStateMonsters, action = {}) => {\n  switch (action.type) {\n    case REQUEST_MONSTERS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      });\n\n    case REQUEST_MONSTERS_SUCCESS:\n      return Object.assign({}, state, {\n        monsters: action.payload,\n        isPending: false\n      });\n\n    case REQUEST_MONSTERS_FAIL:\n      return Object.assign({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/matt/code/matt-kukawski/monstrous-mates/src/reducers.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_MONSTERS_PENDING","REQUEST_MONSTERS_SUCCESS","REQUEST_MONSTERS_FAIL","initialStateSearch","searchField","searchMonsters","state","action","console","log","type","payload","initialStateMonsters","monsters","isPending","error","requestMonsters","Object","assign"],"mappings":";;;;;;AAAA;AACA,SACEA,mBADF,EAEEC,wBAFF,EAGEC,wBAHF,EAIEC,qBAJF,QAKO,cALP;AAOA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,WAAW,EAAE;AADY,CAA3B;AAIA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAACH,kBAAP,EAA2BI,MAAM,GAAC,EAAlC,KAAyC;AACrEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;;AACA,UAAOH,MAAM,CAACG,IAAd;AACE,SAAKX,mBAAL;AACE;AACA,+BAAYO,KAAZ;AAAmBF,QAAAA,WAAW,EAAEG,MAAM,CAACI;AAAvC;;AACF;AACE,aAAOL,KAAP;AALJ;AAOD,CATM;AAWP,MAAMM,oBAAoB,GAAG;AAC3BC,EAAAA,QAAQ,EAAE,EADiB;AAE3BC,EAAAA,SAAS,EAAE,IAFgB;AAG3BC,EAAAA,KAAK,EAAE;AAHoB,CAA7B;AAMA,OAAO,MAAMC,eAAe,GAAG,CAACV,KAAK,GAACM,oBAAP,EAA6BL,MAAM,GAAC,EAApC,KAA2C;AACxE,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKV,wBAAL;AACE,aAAOiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAACQ,QAAAA,SAAS,EAAE;AAAZ,OAAzB,CAAP;;AACF,SAAKb,wBAAL;AACE,aAAOgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAACO,QAAAA,QAAQ,EAAEN,MAAM,CAACI,OAAlB;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAzB,CAAP;;AACF,SAAKZ,qBAAL;AACE,aAAOe,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,EAAyB;AAACS,QAAAA,KAAK,EAAER,MAAM,CAACI;AAAf,OAAzB,CAAP;;AACF;AACE,aAAOL,KAAP;AARJ;AAUD,CAXM","sourcesContent":["// import variables rather than use strings for 'type' to assist in error detection (typos etc)\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAIL\n} from 'constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchMonsters = (state=initialStateSearch, action={}) => {\n  console.log(action.type);\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return Object.assign({}, state, { searchField: action.payload });\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateMonsters = {\n  monsters: [],\n  isPending: true,\n  error: ''\n}\n\nexport const requestMonsters = (state=initialStateMonsters, action={}) => {\n  switch (action.type) {\n    case REQUEST_MONSTERS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_MONSTERS_SUCCESS:\n      return Object.assign({}, state, {monsters: action.payload, isPending: false})\n    case REQUEST_MONSTERS_FAIL:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}