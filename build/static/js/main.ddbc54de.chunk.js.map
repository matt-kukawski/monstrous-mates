{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["name","email","id","className","alt","src","renderCards","monsters","map","monster","Card","key","searchfield","searchChange","type","placeholder","onChange","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestMonsters","searchField","onSearchChange","isPending","filteredMonsters","filter","toLowerCase","includes","SearchBox","Scroll","CardList","connect","searchMonsters","requestMonsters","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateMonsters","logger","createLogger","rootReducer","combineReducers","action","console","log","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ddbc54de.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ name, email, id }) => {\n  return (\n    <div className='tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='card-img' src={`https://api.adorable.io/avatars/200/${id}.png`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\n","import React, { Fragment } from 'react';\nimport Card from 'components/Card';\n\nexport default ({monsters}) => {\n  const renderCards = monsters.map( monster => {\n    return (\n      <Card\n        key={monster.id}\n        name={monster.name}\n        email={monster.email}\n        id={monster.id}\n      />\n    );\n  })\n\n  return (\n    <Fragment>\n      {renderCards}\n    </Fragment>\n  );\n}\n","import React from 'react';\n\nexport default ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--dark-red bg-light-yellow t-red'\n        type='search'\n        placeholder='find monsters'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default (props) => {\n  // console.log(props);\n  return (\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '700px' }}>\n      { props.children }\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Hmm... not good!</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestMonsters } from 'actions';\nimport CardList from 'components/CardList';\nimport SearchBox from 'components/SearchBox';\nimport Scroll from 'components/Scroll';\nimport ErrorBoundary from 'components/ErrorBoundary';\n// import { monsters } from '../monsters.js';\nimport 'containers/App.css';\n\n// mapStateToProps tells component what state to listen to and send down as props\nconst mapStateToProps = state => {\n  return {\n    // props to be returned from applicable reducer\n    searchField: state.searchMonsters.searchField,\n    monsters: state.requestMonsters.monsters,\n    isPending: state.requestMonsters.isPending\n  }\n}\n\n// mapDispatchToProps tells component what dispatch/actions to listen to i.e. sends action\nconst mapDispatchToProps = (dispatch) => {\n  // return object that contains all actions\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestMonsters: () => dispatch(requestMonsters())\n  }\n}\n\nclass App extends Component {\n  // constructor() {\n  //   super()\n  //   this.state= {\n  //     monsters: [],\n  //     searchfield: ''\n  //   }\n  // }\n\n  componentDidMount() {\n    // console.log(this.props.store.getState());\n    // this.setState( { monsters: monsters } );\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //   .then(response => response.json())\n    //   .then(users => this.setState( { monsters: users }));\n    this.props.onRequestMonsters();\n  }\n\n  // onSearchChange = (event) => {\n  //   console.log(event.target.value);\n  //   this.setState({ searchfield: event.target.value });\n  // }\n\n  render() {\n    // searchField now comes from props not component state\n    const { monsters, searchField, onSearchChange, isPending } = this.props;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    // console.log(filteredMonsters);\n\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Monstrous Mates</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList monsters={filteredMonsters} />\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// 'connect' a higher order function i.e. returns another function\n// subscribes component to any changes in redux store\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// import variables rather than use strings for 'type' to assist in error detection (typos etc)\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAIL\n} from 'constants.js';\n// import { apiCall } from './api/api'\n\nexport const setSearchField = (text) => {\n  // console.log(text);\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n}\n\n// ordinarily redux expects an object to be returned by an action, reduxThunk middleware allows a function to be returned initially followed by the appropriate action\nexport const requestMonsters = () => (dispatch) => {\n  dispatch({ type: REQUEST_MONSTERS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_MONSTERS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_MONSTERS_FAIL, payload: error }))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n// for dealing with async monsters ajax call\nexport const REQUEST_MONSTERS_PENDING = 'REQUEST_MONSTERS_PENDING';\nexport const REQUEST_MONSTERS_SUCCESS = 'REQUEST_MONSTERS_SUCCESS';\nexport const REQUEST_MONSTERS_FAIL = 'REQUEST_MONSTERS_FAIL';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import variables rather than use strings for 'type' to assist in error detection (typos etc)\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_MONSTERS_PENDING,\n  REQUEST_MONSTERS_SUCCESS,\n  REQUEST_MONSTERS_FAIL\n} from 'constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchMonsters = (state=initialStateSearch, action={}) => {\n  console.log(action.type);\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return Object.assign({}, state, { searchField: action.payload });\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n}\n\nconst initialStateMonsters = {\n  monsters: [],\n  isPending: true,\n  error: ''\n}\n\nexport const requestMonsters = (state=initialStateMonsters, action={}) => {\n  switch (action.type) {\n    case REQUEST_MONSTERS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_MONSTERS_SUCCESS:\n      return Object.assign({}, state, {monsters: action.payload, isPending: false})\n    case REQUEST_MONSTERS_FAIL:\n      return Object.assign({}, state, {error: action.payload})\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'index.css';\nimport App from 'containers/App';\nimport * as serviceWorker from 'serviceWorker';\nimport { searchMonsters, requestMonsters } from 'reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\n// combine reducers for use in initialising store\nconst rootReducer = combineReducers({searchMonsters, requestMonsters})\n// const store = createStore(rootReducer);\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n// console.log(store);\n\n// Provider facilitates availablility of store to all children, saves having to manually pass down each level\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}